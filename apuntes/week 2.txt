MONGO DB 101 with NodeJS

WEEK 2 - CRUD

* CRUD Operations (Create, Read, Update, Delete)
    - Create => db.[collectionname]
        + .insertOne({ object })
            - Returns {'acknowledged': '', 'insertedId': ''}
                + Acknowledged => Command succeded (true - false)
                + InsertedId => Unique identifier, generated by MongoDB if we do not provide _id on the object passed as parameter
        + .insertMany([{ object1 }, { object2 }])
            - Returns {'acknowledged': '', 'insertedIds': '[]'}
                + Acknowledged => Command succeded (true - false)
                + InsertedIds => Unique identifier, generated by MongoDB if we do not provide _id for all the objects passed as parameter
        + .insertMany([{ object1 }, { object2 }], { options })
            - Options
                + Ordered => Tells MongoDB if it should stop or continue processing or trying to do the inserts if it encounters and error
    - Read => db.[collectionname]
        + Based on scalar values
            - .find({}) => Returns all objects inside the specified collection as a Cursor
            - .find({ 'key': 'value' }) => Returns all objects inside the specified collection that has the condition of the object passed as parameter as a Cursor
            - .find({}).count() => Returns the numbers of objects inside the specified collection
        + Based on embedded objects
            - .find({ 'object.key': 'value' }) => Returns all objects inside the specified collection that has the condition of the embedded object passed as parameter as a Cursor 
        + Based on arrays
            - On the entire array
                + .find({ 'key': '[value1, value2]' }) => Returns all objects inside the specified collection that contains an array equal to the array passed as parameter as a Cursor
            - On any element
                + .find({ 'key': 'value' }) => Returns all objects inside the specified collection that contains in their array of elements one element equal to the one passed as parameter as 
                  a Cursor
            - On a specific element
                + .find({ 'object.index': 'value' }) => Returns all objects inside the specified collection that contains in their array of elements one element in the
                  specified position equal to the one passed as parameter as a Cursor
            - Complex matches using operators
        + Cursor
            - hasNext()
            - next()
            - objsLeftInBatch() => By default each batch will containt 101 documents
        + Projection => It is a way of reducing the size of the data returned from a query
            - .find({}, { projection }) => Returns only the specified fields of an object depending if 0 or 1 is assigned to that field on the projection, by default _id always shows
        + Query Operators
            - Comparison Operators
                + .find({ 'key': { $gt: value } }) => Greater than the value passed as parameter
                + .find({ 'key': { $lt: value } }) => Lesser than the value passed as parameter
                + .find({ 'key': { $gte: value } }) => Greater or equal than the value passed as parameter
                + .find({ 'key': { $lte: value } }) => Lesser or equal than the value passed as parameter
                + .find({ 'key': { $ne: value } }) => Not equal to the value passed as parameter
                + .find({ 'key': { $in: [value1, value2] } }) => Equal to one of the values in the array passed as parameter
                + .find({ 'key': { $nin: [value1, value2] } }) => Not equal to one of the values in the array passed as parameter
            - Element Operators
                + .find({ 'key': { $exists: boolean} }) => Matches documents if either a document has or has not a specific field
                + .find({ 'key': { $type: type} }) => Matches documents that has that specific type on its field
            - Logical Operators
                + .find({ $or: ['key1' : 'value1', 'key2': 'value2'] })
                + .find({ $and: ['key1' : 'value1', 'key2': 'value2'] })
            - Regex Operators
                + .find({ 'key': { $regex: regularexpression } })
            - Array Operators
                + .find({ 'key': { $all: ['value1', 'value2'] } }) => Returns all objects inside the specified collection that contains in their array of elements all the elements passed 
                  as parameter
                + .find({ 'key': { $size: 'value' } }) => Returns all objects inside the specified collection which the size of their array of elements is equal to the one passed as parameter
                + .find({ 'key': { $elemMatch: { 'key1': 'value1', 'key2': 'value2' } })
    - Update => db.[collectionname]
        + .updateOne({ filter }, { $set: { object } })
            - Returns {'acknowledged': '', 'matchedCount': '', 'modifiedCount': ''}
                + Acknowledged => Command succeded (true - false)
                + MatchedCount => Quantity of matched documents
                + ModifiedCount => Quantity of modified documents (0 or 1)
        + .updateMany({ filter }, { $set: { object } })
        + .replaceOne({ filter }, value)
        + Update Operators
            $set => Replace or add the specified field
            $unset => Removes the specified field
            

                